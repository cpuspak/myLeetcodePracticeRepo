class Solution {
public:
    
    typedef struct TrieNode {
            int isWord = 0;
            TrieNode *children[26] = {NULL};

    } TrieNode;
    
    void insert(TrieNode *head, string s) {
        TrieNode* tempNode = head;
        for(char c: s) {
            if (tempNode->children[c-'a'] == NULL) tempNode->children[c-'a'] = new TrieNode();
            tempNode = tempNode->children[c-'a'];
        }
        tempNode->isWord = 1;
    }
    
    bool contains(TrieNode* head, string s){
        TrieNode* tempNode = head;
        for(char c: s){
            if (tempNode->children[c-'a']) tempNode = tempNode->children[c-'a'];
            else return false;
        }
        return tempNode->isWord;
    }
    
    vector<int> dir = {1,-1};
    
    void dfs(vector<vector<char>> &board, int i, int j, vector<vector<int>> &visited, unordered_map<string, int> &partOfAns, TrieNode* curHead, string curString){
        visited[i][j] = 1;
        if (!curHead) return;
        if (curHead->isWord){
            
            partOfAns[curString] = 1;
        }
        for(int di = 0 ; di < 2 ; di++){
            //cout << "di " << di << endl;
            if (isValid(board, i+dir[di], j, visited, curHead)) 
                dfs(board, i+dir[di], j, visited, partOfAns, curHead->children[board[i+dir[di]][j]-'a'], curString+board[i+dir[di]][j]);
            
            if (isValid(board, i,dir[di]+j, visited, curHead)) 
                dfs(board, i,dir[di]+j, visited, partOfAns, curHead->children[board[i][dir[di]+j]-'a'], curString+board[i][dir[di]+j]);
        }
        visited[i][j] = 0;
        
    }
    
    bool isValid(vector<vector<char>> &board, int i, int j, vector<vector<int>> &visited, TrieNode* curHead){
        if (i < board.size() && j < board[0].size() && visited[i][j] == 0 && curHead->children[board[i][j]-'a']) return true;
        return false;
    }
    
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        TrieNode* head = new TrieNode();
        
        unordered_map<string, int> partOfAns;
        for(string s: words) {
            insert(head, s);
        }
        
        vector<vector<int>> visited(board.size(), vector<int>(board[0].size()));
        
        for(int i = 0 ; i < board.size() ; i++){
            for(int j = 0 ; j < board[0].size() ; j++){
                TrieNode* tempHead = head;
                if (tempHead->children[board[i][j]-'a']) {
                    string curString(1,board[i][j]);
                    dfs(board, i, j, visited, partOfAns, tempHead->children[board[i][j]-'a'], curString);
                    for (auto& sub : visited) {
                        fill(sub.begin(), sub.end(), 0);
                    }
                }
            }
        }
        
        vector<string> ans;
        for(pair<string, int> p: partOfAns){
            if (p.second == 1) ans.push_back(p.first);
        }
        return ans;
            
        
    }
};