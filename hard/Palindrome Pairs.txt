class Solution {
public:
    
    vector<vector<int>> ans;
    
    typedef struct TrieNode {
        TrieNode *children[26] = {NULL};
        int wordEndingHere = -1;
        vector<int> wordsWithRestPartPalindrome;
    } TrieNode;
    
    void insert(TrieNode *head, string &s, int index) {
        TrieNode *tempHead = head;
        for(int i = s.length() - 1 ; i >=0 ; i--){
            if (tempHead->children[s[i]-'a'] == NULL){
                tempHead->children[s[i]-'a'] = new TrieNode();
            }
            tempHead = tempHead->children[s[i]-'a'];
            if (i != 0 && isUptoIPalindrome(i-1,s)) tempHead->wordsWithRestPartPalindrome.push_back(index);
            if (i == 0) tempHead->wordEndingHere = index;
            
        }
        //cout << "insert ended" << endl;
    }
    
    void search(TrieNode *head, string &s, int index) {
        TrieNode *tempHead = head;
        
        for(int i = 0 ; i < s.length() ; i++){
            if (tempHead->children[s[i]-'a'] != NULL){
                tempHead = tempHead = tempHead->children[s[i] - 'a'];
                if (tempHead->wordEndingHere != index && tempHead->wordEndingHere != -1) {
                    if (isFromIPalindrome(i+1, s)) ans.push_back({index, tempHead->wordEndingHere});
                }
                
            } else return;
        }
        
        for (int i = 0 ; i < tempHead->wordsWithRestPartPalindrome.size() ; i++){
            if (tempHead->wordsWithRestPartPalindrome[i] != index) ans.push_back({index, tempHead->wordsWithRestPartPalindrome[i]});
        }
        
    }
    
    bool isUptoIPalindrome(int index, string &s) {
        for(int i = 0 ; i <= (int)(index/2) ; i++)
            if (s[i] != s[index-i]) return false;
        return true;
    }
    
    bool isFromIPalindrome(int index, string &s) {
        int lastIndex = s.length()-1;
        
        for(int i = index ; i <= (int)((lastIndex+index)/2) ; i++)
            if (s[i] != s[lastIndex - (i-index)]) return false;
        return true;
    }
    
    
    vector<vector<int>> palindromePairs(vector<string>& words) {
        TrieNode *head = new TrieNode();
        
        for(int i = 0 ; i < words.size() ; i++){
            if (words[i].size() == 0){
                for(int i1 = 0 ; i1 < words.size() ; i1++){
                    if (i1 != i && isFromIPalindrome(0,words[i1])) {
                        ans.push_back({i,i1});
                        ans.push_back({i1,i});
                    }
                }
                break;
            }
        }
        
        for(int i = 0 ; i < words.size() ; i++){
            insert(head, words[i], i);
        }
        
        
        
        for (int i = 0 ; i < words.size() ; i++){
            search(head, words[i], i);
        }
        
        return ans;
        
    }
};