class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        if (k == 0 || prices.size() == 0) return 0;
        vector<vector<int>> sk(2*k, vector<int>(prices.size(), 0));
        vector<int> f(prices.size(), 0);
        sk[0][0] = 0;
        sk[1][0] = -prices[0];
        int maxPrice = *(max_element(prices.begin(), prices.end()));
        for(int i = 2 ; i < 2*k ; i++) sk[i][0] = INT_MIN+maxPrice;
        f[0] = INT_MIN;
        // cout << "im here" << endl;
        for(int i = 1 ; i < prices.size() ; i++){
            sk[0][i] = sk[0][i-1];
            // sk[1][i] = max(sk[1][i-1], sk[0][i-1]-prices[i-1]);
            // sk[2][i] = max(sk[2][i-1], sk[1][i-1]+prices[i-1]);
            
            for(int j = 1 ; j < 2*k ; j++){
                if (j % 2 == 1) {
                    if (sk[j-1][i-1] == INT_MIN) sk[j][i] = sk[j][i-1];
                    else sk[j][i] = max(sk[j-1][i-1] - prices[i], sk[j][i-1]);
                }
                else sk[j][i] = max(sk[j-1][i-1] + prices[i], sk[j][i-1]);
            }
            f[i] = max(f[i-1], sk[2*k-1][i-1]+prices[i]);
        }
        int ans = 0;
        for(int i = 0 ; i < 2*k ; i++) {
            if(sk[i][prices.size() - 1] > ans) ans =  sk[i][prices.size() - 1];
        }
        return max(f[prices.size() - 1], ans);
        
    }
};