class Solution {
public:
    int maxProfit(vector<int>& prices) {
        vector<int> s0(prices.size(), 0);
        vector<int> s1(prices.size(), 0);
        vector<int> s2(prices.size(), 0);
        vector<int> s3(prices.size(), 0);
        vector<int> f(prices.size(), 0);
        
        s0[0] = 0;
        s1[0] = -prices[0];
        s2[0] = INT_MIN;
        s3[0] = INT_MIN;
        f[0] = INT_MIN;
        
        for(int i = 1; i < prices.size() ; i++){
            // cout << s0[i-1] << " " << s1[i-1] << " " << s2[i-1] << " " << s3[i-1] << " " << f[i-1] << endl;
            s0[i] = s0[i-1];
            s1[i] = max(s0[i-1]-prices[i],s1[i-1]);
            s2[i] = max(s1[i-1]+prices[i],s2[i-1]);
            if (s2[i-1] != INT_MIN) s3[i] = max(s2[i-1]-prices[i],s3[i-1]);
            else s3[i] = s3[i-1];
            f[i] = max(f[i-1],s3[i-1]+prices[i]);
        }
        // cout << s0[prices.size() - 1] << " " << s1[prices.size() - 1] << " " << s2[prices.size() - 1] << " " << s3[prices.size() - 1] << " " << f[prices.size() - 1] << endl;
        return max(max(max(s0[prices.size() - 1], s1[prices.size() - 1]), s2[prices.size() - 1]),max(s3[prices.size() - 1], f[prices.size() - 1]));
    }
};