//heap soln
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue <ListNode*, vector<ListNode*>, comperator> pq;
        
        for(int i = 0 ; i < lists.size() ; i++){
            ListNode* tempNode = lists[i];
            while(tempNode != NULL){
                pq.push(tempNode);
                tempNode = tempNode->next;
            }
        }
        if (!pq.size()) return NULL;
        ListNode* ansNode = new ListNode();
        ListNode* tempNode = ansNode;
        
        while(pq.size() > 1){
            tempNode->val = pq.top()->val;
            tempNode->next = new ListNode();
            tempNode = tempNode->next;
            pq.pop();
            
        }
        tempNode->val = pq.top()->val;
        return ansNode;
        
    }
    
    struct comperator {
        bool operator()(ListNode* node1, ListNode* node2) {
            return node1->val > node2->val;
        }
    };
};

//divide and conquer soln
ListNode *mergeKLists(vector<ListNode *> &lists) {
    if(lists.empty()){
        return nullptr;
    }
    while(lists.size() > 1){
        lists.push_back(mergeTwoLists(lists[0], lists[1]));
        lists.erase(lists.begin());
        lists.erase(lists.begin());
    }
    return lists.front();
}
ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
    if(l1 == nullptr){
        return l2;
    }
    if(l2 == nullptr){
        return l1;
    }
    if(l1->val <= l2->val){
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    }
    else{
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }
}