1st soln in place : 
public ListNode mergeTwoLists(ListNode l1, ListNode l2){
		if(l1 == null) return l2;
		if(l2 == null) return l1;
		if(l1.val < l2.val){
			l1.next = mergeTwoLists(l1.next, l2);
			return l1;
		} else{
			l2.next = mergeTwoLists(l1, l2.next);
			return l2;
		}
}

2nd soln (mine):
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* mergedListHead = (ListNode*)malloc(sizeof(ListNode));
        ListNode* tempMergedListHead = mergedListHead;
        if (list1 == NULL) return list2;
        if (list2 == NULL) return list1;
        while(list1 != NULL && list2 != NULL){
            ListNode* tempNode = (ListNode*)malloc(sizeof(ListNode));
            if (list1->val > list2->val){
                tempNode->val = list2->val;
                list2 = list2->next;
            } else {
                tempNode->val = list1->val;
                list1 = list1->next;
            }
            tempMergedListHead->next = tempNode;
            tempMergedListHead = tempMergedListHead->next;
        }
        if (list1 == NULL) tempMergedListHead->next = list2;
        if (list2 == NULL) tempMergedListHead->next = list1;
        return mergedListHead->next;
        
    }
};