/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* fastPtr = head;
        ListNode* slowPtr = head;
        if (head -> next == NULL) return head;
        if (head -> next -> next == NULL) return head -> next;
        while(fastPtr->next != NULL && fastPtr->next->next != NULL){
            slowPtr = slowPtr->next;
            fastPtr = fastPtr->next->next;
            if (fastPtr->next == NULL) return slowPtr;
            if (fastPtr->next->next == NULL) return slowPtr->next;
        }
        if (fastPtr->next == NULL) return slowPtr;
        if (fastPtr->next->next == NULL) return slowPtr->next;
        return slowPtr;
    }
};