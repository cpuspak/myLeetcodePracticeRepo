/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if (!root) return vector<vector<int>>(0);
        
        vector<TreeNode*> curTraversing;
        vector<TreeNode*> nextTraversing;
        
        curTraversing.push_back(root);
        
        vector<vector<int>> ans;
        
        while(!curTraversing.empty()){
            vector<int> temp;
            for(TreeNode* node: curTraversing) temp.push_back(node->val);
            ans.push_back(temp);
            
            for(TreeNode* node: curTraversing){
                if(node->left) nextTraversing.push_back(node->left);
                if(node->right) nextTraversing.push_back(node->right);
            }
            
            curTraversing = nextTraversing;
            nextTraversing.resize(0);
        }
        return ans;
    }
};