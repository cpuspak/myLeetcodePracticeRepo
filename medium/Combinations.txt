//my backtrack soln
class Solution {
public:
    
    vector<vector<int>> ans;
    
    void backtrack(int n, int k, int begin, vector<int> curVec){
        //cout << begin << endl;
        if (curVec.size() == k){
            ans.push_back(curVec);
            return;
        }
        for(int i = begin ; i <= n ; i++){
            curVec.push_back(i);
            //cout << begin << " " << i << endl;
            backtrack(n,k,i+1,curVec);
            curVec.pop_back();
        }
    }
    vector<vector<int>> combine(int n, int k) {
        vector<int> curVec;
        backtrack(n,k,1,curVec);
        return ans;
    }
};

//iterative soln
class Solution {
public:
	vector<vector<int>> combine(int n, int k) {
		vector<vector<int>> result;
		int i = 0;
		vector<int> p(k, 0);
		while (i >= 0) {
			p[i]++;
			if (p[i] > n) --i;
			else if (i == k - 1) result.push_back(p);
			else {
			    ++i;
			    p[i] = p[i - 1];
			}
		}
		return result;
	}
};