//greedy soln
Idea is start from each index and try to extend palindrome for both odd and even length.

public class Solution {
    int count = 0;
    
    public int countSubstrings(String s) {
        if (s == null || s.length() == 0) return 0;
        
        for (int i = 0; i < s.length(); i++) { // i is the mid point
            extendPalindrome(s, i, i); // odd length;
            extendPalindrome(s, i, i + 1); // even length
        }
        
        return count;
    }
    
    private void extendPalindrome(String s, int left, int right) {
        while (left >=0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            count++; left--; right++;
        }
    }
}
//dp soln
class Solution {
public:
    bool isPalindrome(string s){
        for(int i = 0 ; i < (s.length()/2) ; i++ ){
            if (s.at(i) != s.at(s.length() - 1 - i)) return false;
        }
        return true;
    }
    
    int countSubstrings(string s) {
        vector<vector<int>> dp(s.length(), vector<int>(s.length(), 0));
        fill(dp[0].begin(), dp[0].end(), 1);
        
        for (int i = 1 ; i < s.length() ; i++){
            for(int j = 0 ; j < s.length()-i ; j++){
                if(i == 1){
                    dp[i][j] = dp[i-1][j]+dp[i-1][j+1];
                    if (isPalindrome(s.substr(j,i+1))) dp[i][j] += 1;
                } else {
                    dp[i][j] = dp[i-1][j]+dp[i-1][j+1];
                    if (isPalindrome(s.substr(j,i+1))) dp[i][j] += 1;
                    dp[i][j] -= dp[i-2][j+1];
                }
            }
        }
        
        // for(int i = 0 ; i < s.length() ; i++){
        //     for(int j = 0 ; j < s.length() ; j++)
        //         cout << dp[i][j] << " ";
        //     cout << endl;
        // }
        return dp[s.length() - 1][0];
        
    }
};