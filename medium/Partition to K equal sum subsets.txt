class Solution {
public:
    unordered_map<int, int> dp;
    int convertVectorToNum(vector<int> nums){
        int sum = 0;
        for(int i = 0 ; i < nums.size() ; i++){
            if (nums[i] != 0) sum += (1 << i);
        }
        return sum;
    }
    bool getPossibleSum(vector<int> nums, int k, int requiredSum, int curAchievedSum){
        int convertedNum = convertVectorToNum(nums);
        if (dp.find(convertedNum) != dp.end()) return dp[convertedNum];
        if (k == 0) return true;
        for(int i = 0 ; i < nums.size() ; i++){
            if (nums[i] != 0){
                if (curAchievedSum+nums[i] < requiredSum){
                    int newCurAchievedSum = curAchievedSum+nums[i];
                    int tempNum = nums[i];
                    nums[i] = 0;
                    convertedNum = convertVectorToNum(nums);
                    if (getPossibleSum(nums, k, requiredSum, newCurAchievedSum)) {
                        dp[convertedNum] = true;
                        return true;
                    } else dp[convertedNum] = false;
                    nums[i] = tempNum;
                } else if (curAchievedSum+nums[i] == requiredSum){
                    k--;
                    int tempNum = nums[i];
                    nums[i] = 0;
                    convertedNum = convertVectorToNum(nums);
                    if (getPossibleSum(nums, k, requiredSum, 0)) {
                        dp[convertedNum] = true;
                        return true;
                    } else dp[convertedNum] = false;
                    nums[i] = tempNum;
                    k++;
                }
            }
        }
        return false;
        
    }
    
    
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum % k != 0 || nums.size() < k) return false;
        int requiredSum = (int)(sum/k);
        dp[0] = true;
        return getPossibleSum(nums, k, requiredSum, 0);
    }
};