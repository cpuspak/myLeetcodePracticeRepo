/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int sum = 0, prod = 1;
        ListNode *ans;
        ListNode *temp1 = l1, *temp2 = l2, *lastNode;
        int carry = 0;
        while(temp1 != NULL || temp2 != NULL){
            int sum = carry;
            if (temp1 != NULL) sum += (temp1->val);
            if (temp2 != NULL) sum += (temp2->val);
            if(sum >= 10){
                carry = sum/10;
                sum = sum%10;
            } else carry = 0;
            if (temp1 != NULL){
                temp1->val = sum;
                ans = l1;
                lastNode = temp1;
                temp1 = temp1->next;
            }
            if (temp2 != NULL){
                temp2->val = sum;
                ans = l2;
                lastNode = temp2;
                temp2 = temp2->next;
            }
        }
        if (carry > 0){
            //cout<<"im here"<<endl;
            ListNode* newNode = (ans == l1)?l2:l1;
            //cout<<"im here"<<endl;
            newNode->val = carry;
            //cout<<"im here"<<endl;
            newNode->next = NULL;
            //cout<<"im here"<<endl;
            //cout << lastNode->val<<endl;
            lastNode->next = newNode;
            //cout << lastNode->val<<endl;
            
        }
        //ListNode* tempAns = ans;
        // while(tempAns){
        //     cout<<tempAns->val<<" ";
        //     tempAns = tempAns->next;
        // }
        return ans;
    }
};