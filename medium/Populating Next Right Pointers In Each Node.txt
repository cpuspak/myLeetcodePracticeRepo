//O(n) time and O(n) space soln
class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;
        vector<Node*> curTraversing;
        vector<Node*> nextTraversing;
        
        curTraversing.push_back(root);
        
        while(!curTraversing.empty()){
            if (curTraversing.size() > 1){
                for(int i = 0 ; i < curTraversing.size() ; i++){
                    if (i == curTraversing.size() - 1) curTraversing[i]->next = NULL;
                    else curTraversing[i]->next = curTraversing[i+1];
                }
            }
            for(Node* node: curTraversing){
                if(node->left) nextTraversing.push_back(node->left);
                if(node->right) nextTraversing.push_back(node->right);
            }
            curTraversing = nextTraversing;
            nextTraversing.resize(0);
        }
        return root;
        
    }
};

//O(n) time and O(1) space

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;
        Node* curTravelling = root;
        Node* nextLevelNode = root->left;
        
        while(curTravelling){
            if (curTravelling->left && curTravelling->right) curTravelling->left->next = curTravelling->right;
            if (curTravelling->right && curTravelling->next) curTravelling->right->next = curTravelling->next->left;
            if (curTravelling->next) curTravelling = curTravelling->next;
            else {
                curTravelling = nextLevelNode;
                if(nextLevelNode) nextLevelNode = nextLevelNode->left;
            }
        }
        return root;
        
    }
};