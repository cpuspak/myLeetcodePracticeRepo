//my soln
class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        int targetTillNow = arr[0], targetIndex = 0;
        int diffTillNow = abs(targetTillNow - x);
        //cout << k << " " << x << endl;
        int left = 0, right = arr.size() - 1;
        while(left < right){
            
            int mid = left + (right - left)/2;
            //cout << left << " " << mid << " " << right << endl;
            int target = arr[mid];
            int diff = abs(target - x);
            if (diff < diffTillNow) {
                diffTillNow = diff;
                targetTillNow = target;
                targetIndex = mid;
            }
            //cout << diff << " "<< target << " " << x << endl;
            if (diff == 0){
                break;
            } else if (target > x){
                right = mid;
            } else left = mid + 1;
            //cout << targetTillNow << endl;
        }
        if (abs(arr[left] - x) < abs(targetTillNow - x)){
            targetIndex = left;
            targetTillNow = arr[left];
        }
        //cout << targetTillNow << " " << targetIndex << endl;
        vector<int> ans;
        if (k == 1) {
            ans.push_back(targetTillNow);
            return ans;
        }
        left = targetIndex, right = targetIndex;
        //cout << "Initial target index" << targetIndex << endl;
        if (targetIndex == 0){
            right++;
        } else if (targetIndex == arr.size() - 1){
            left--;
        } else {
            if (abs(arr[targetIndex - 1] - x) <= abs(arr[targetIndex + 1] - x)){
                left--;
            } else right++;
        }
        while(right - left + 1 < k){
            //cout << left << " " << right << endl;
            if (left == 0){
                right += (k - (right - left + 1));
                break;
            } else if (right == arr.size() - 1){
                left -= (k - (right - left + 1));
                break;
            } else {
                if (abs(arr[left - 1] - x) <= abs(arr[right + 1] - x)){
                    left--;
                } else right++;
            }
        }
        //cout << "final" << left << " " << right << endl;
        for(int i = left ; i <= right ; i++){
            ans.push_back(arr[i]);
        }
        return ans;
    }
};



//sliding window soln
Intuition
The array is sorted.
If we want find the one number closest to x,
we don't have to check one by one.
it's straightforward to use binary research.

Now we want the k closest,
the logic should be similar.


Explanation
Assume we are taking A[i] ~ A[i + k -1].
We can binary research i
We compare the distance between x - A[mid] and A[mid + k] - x

@vincent_gui listed the following cases:
Assume A[mid] ~ A[mid + k] is sliding window

case 1: x - A[mid] < A[mid + k] - x, need to move window go left
-------x----A[mid]-----------------A[mid + k]----------

case 2: x - A[mid] < A[mid + k] - x, need to move window go left again
-------A[mid]----x-----------------A[mid + k]----------

case 3: x - A[mid] > A[mid + k] - x, need to move window go right
-------A[mid]------------------x---A[mid + k]----------

case 4: x - A[mid] > A[mid + k] - x, need to move window go right
-------A[mid]---------------------A[mid + k]----x------

If x - A[mid] > A[mid + k] - x,
it means A[mid + 1] ~ A[mid + k] is better than A[mid] ~ A[mid + k - 1],
and we have mid smaller than the right i.
So assign left = mid + 1.

vector<int> findClosestElements(vector<int>& A, int k, int x) {
        int left = 0, right = A.size() - k;
        while (left < right) {
            int mid = (left + right) / 2;
            if (x - A[mid] > A[mid + k] - x)
                left = mid + 1;
            else
                right = mid;
        }
        return vector<int>(A.begin() + left, A.begin() + left + k);
    }