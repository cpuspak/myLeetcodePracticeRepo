class Solution {
public:
    
    unordered_map<int, int> dp;
    int findWayGivenTarget(vector<int> nums, int s){
        int dp[s + 1];
        for (int i = 0 ; i <= s ; i++ ) dp[i] = 0;
        dp[0] = 1;
        for (int n: nums){
            for (int j = s ; j >= n ; j--){
                dp[j] += dp[j - n];
            }
        }
        return dp[s];
    } 
    
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum < target || (target + sum) % 2 == 1) return 0;
        else return findWayGivenTarget(nums, abs((target+sum)/2));
    }
};