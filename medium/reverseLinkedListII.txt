/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (left == right) return head;
        ListNode* tempHead = head;
        int position = 1;
        if (right == left + 1){
            if (left == 1){
                ListNode* leftNode = head;
                ListNode* rightNode = head->next;
                ListNode* rightNext = head->next->next;
                head->next = rightNext;
                rightNode->next = head;
                return rightNode;
            }
            while(position+1 < left){
                tempHead = tempHead->next;
                position += 1;
            }
            ListNode* startOfReversal;
            if (left > 1)
                startOfReversal = tempHead->next;
            else startOfReversal = tempHead;
            ListNode* leftNode = startOfReversal;
            ListNode* rightNode = startOfReversal->next;
            ListNode* rightNext = leftNode->next->next;
            leftNode->next = rightNext;
            rightNode->next = leftNode;
            tempHead->next = rightNode;
            return head;
        }
        //int position = 1;
        while(position+1 < left){
            tempHead = tempHead->next;
            position += 1;
        }
        ListNode* startOfReversal;
        if (left > 1)
            startOfReversal = tempHead->next;
        else startOfReversal = tempHead;
        int reversalLocation = left + 1;
        ListNode* first = startOfReversal;
        ListNode* second = startOfReversal->next;
        ListNode* third = startOfReversal->next->next;
        while(reversalLocation <= right){
            second->next = first;
            first = second;
            second = third;
            if (third != NULL) third = third->next;
            reversalLocation += 1;
        }
        startOfReversal->next = second;
        if (left > 1)
            tempHead->next = first;
        else
            return first;
        return head;
    }
};


/*cool ass soln for reversal using four ptrs
def reverseBetween(self, head, m, n):
        """
        :type head: ListNode
        :type m: int
        :type n: int
        :rtype: ListNode
        """
        if not head or m == n: return head
        p = dummy = ListNode(None)
        dummy.next = head
        for i in range(m-1): p = p.next
        tail = p.next

        for i in range(n-m):
            tmp = p.next                  # a)
            p.next = tail.next            # b)
            tail.next = tail.next.next    # c)
            p.next.next = tmp             # d)
        return dummy.next
*/