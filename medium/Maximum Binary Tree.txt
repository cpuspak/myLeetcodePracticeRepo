//O(N) soln
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        TreeNode* newTreeNode = new TreeNode();
        
        stack<TreeNode*> monotonicStack;
        
        for(int i = 0 ; i < nums.size() ; i++){
            TreeNode* tempTreeNode = new TreeNode();
            tempTreeNode->val = nums[i];
            while(!monotonicStack.empty() && monotonicStack.top()->val < nums[i]){
                tempTreeNode->left = monotonicStack.top();
                monotonicStack.pop();
            }
            if (!monotonicStack.empty()) monotonicStack.top()->right = tempTreeNode;
            else {
                newTreeNode = tempTreeNode;
            }
            monotonicStack.push(tempTreeNode);
            
        }
        return newTreeNode;
    }
};