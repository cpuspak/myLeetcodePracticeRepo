class Solution {
public:
    void backtrack(int target, int k, vector<vector<int>>& ans, vector<int> temp, int begin){
        if (target == 0 && temp.size() == k){
            ans.push_back(temp);
        } else if (temp.size() > k) return;
        else {
            for (int i = begin ; i < 10 ; i++){
                if (target - i >= 0){
                    temp.push_back(i);
                    backtrack(target-i, k, ans, temp, i+1);
                    temp.pop_back();
                }
            }
        }
    }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> temp;
        //backtrack(n,k,ans,temp,begin);
        backtrack(n, k, ans, temp, 1);
        return ans;
    }
};