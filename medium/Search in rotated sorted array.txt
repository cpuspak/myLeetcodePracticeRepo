//big big brain
int search(vector<int>& nums, int target) {
    int lo = 0, hi = nums.size();
    while (lo < hi) {
        int mid = (lo + hi) / 2;
        
        double num = (nums[mid] < nums[0]) == (target < nums[0])
                   ? nums[mid]
                   : target < nums[0] ? -INFINITY : INFINITY;
                   
        if (num < target)
            lo = mid + 1;
        else if (num > target)
            hi = mid;
        else
            return mid;
    }
    return -1;
}

//my soln
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if (nums.size() == 1) return nums[0] == target ? 0 : -1;
        int left = 0, right = nums.size() - 1;
        while(left < right){
            //cout << left << " " << right << endl;
            if (nums[left] == target) return left;
            if (nums[right] == target) return right;
            int mid = (left+right)/2;
            if (nums[mid] == target) return mid;
            if (nums[mid] > target){
                if (nums[left] < target) right = mid;
                else if (nums[left] > target){
                    if (nums[mid] < nums[left]) right = mid;
                    else left = mid + 1;
                }
                
            } else if (nums[mid] < target) {
                if (nums[right] > target) left = mid + 1;
                else if (nums[right] < target){
                    if (nums[mid] < nums[right]) right = mid;
                    else left = mid + 1;
                }
            }
        }
        
        if (nums[left] == target) return left;
        if (nums[right] == target) return right;
        return -1;
    }
};