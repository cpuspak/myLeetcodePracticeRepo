/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    vector<vector<int>> ans;
    
    void dfs(TreeNode* curNode, int targetSum, vector<int> path){
        if (!curNode->left && !curNode->right && targetSum == 0) {
            ans.push_back(path);
            return;
        }
        if (curNode->left){
            path.push_back(curNode->left->val);
            dfs(curNode->left, targetSum - curNode->left->val, path);
            path.pop_back();
        }
        if (curNode->right){
            path.push_back(curNode->right->val);
            dfs(curNode->right, targetSum - curNode->right->val, path);
            path.pop_back();
        }
    }
    
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        if (!root) return ans;
        vector<int> path;
        path.push_back(root->val);
        dfs(root, targetSum - root->val, path);
        return ans;
    }
};