class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int matrixSize = matrix.size(), zeroRowSize = matrix[0].size();
        int left = 0, right = matrix.size() - 1;
        // cout << "1 step" << endl;
        if (target > matrix[matrixSize - 1][zeroRowSize - 1] || target < matrix[0][0]) return false; 
        //cout << "2 step" << endl;
        while(left < right){
            int mid = left + (right - left)/2;
            // cout << left << " " << mid << " " << right << endl;
            if (matrix[mid][0] < target) left = mid + 1;
            else right = mid;
        }
        // cout << "3 step" << endl;
        //cout << left << " " << right << endl;
        // cout << (left - 1 > 0 && matrix[left - 1][matrix[0].size() - 1] < target && matrix[left][0] > target) << endl;
        
        if (left < matrixSize && matrix[left][0] == target) return true;
        if (left - 1 > 0 && matrix[left - 1][zeroRowSize - 1] < target && matrix[left][0] > target) return false;
        //cout << "here" << endl;
        int row = (left == 0 || matrix[left][0] < target) ? left : left - 1;
        left = 0, right = zeroRowSize - 1;
        
        while(left < right){
            int mid = left + (right - left)/2;
            if (matrix[row][mid] < target) left = mid + 1;
            else right = mid;
        }
        if (left < zeroRowSize && matrix[row][left] == target) return true;
        if (left - 1 >= 0 && matrix[row][left - 1] == target) return true;
        return false;
    }
};