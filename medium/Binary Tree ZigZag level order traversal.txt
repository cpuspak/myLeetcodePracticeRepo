/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        if (!root) return vector<vector<int>> (0);
        if (!root->left && !root->right) return vector<vector<int>> (1,vector<int>(1,root->val));
        
        vector<vector<int>> ans;
        vector<TreeNode*> current;
        vector<TreeNode*> next;
        
        current.push_back(root);
        
        int flag = 0;
        
        while(current.size() > 0){
            for(int i = 0 ; i < current.size() ; i++){
                if (current[i]->left) next.push_back(current[i]->left);
                if (current[i]->right) next.push_back(current[i]->right);
            }
            ans.push_back(vector<int>(0));
            if (!flag)
                for(int i = 0 ; i < current.size() ; i++) ans[ans.size() - 1].push_back(current[i]->val);
            else for(int i = current.size() - 1 ; i >= 0 ; i--) ans[ans.size() - 1].push_back(current[i]->val);
            
            current.resize(0);
            current = next;
            next.resize(0);
            flag = (flag+1)%2;
        }
        return ans;
        
    }
};