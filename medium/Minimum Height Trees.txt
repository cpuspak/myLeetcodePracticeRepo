class Solution {
public:
    
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n == 1) {
            vector<int> ans(1, 0);
            return ans;
        }
        
        vector<unordered_set<int>> adjList(n);
        for(int i = 0 ; i < edges.size() ; i++){
            adjList[edges[i][0]].insert(edges[i][1]);
            adjList[edges[i][1]].insert(edges[i][0]);
        }
        
        vector<int> leaves;
        
        for(int i = 0 ; i < n ; i++) 
            if (adjList[i].size() == 1) leaves.push_back(i);
        
        // for(int i = 0 ; i < n ; i++){
        //     for(int j = 0 ; j < adjList[i].size() ; j++){
        //         cout << adjList[i][j] << " ";
        //     }
        //     cout << endl;
        // }
        
        while(n > 2){
            n -= leaves.size();
            vector<int> newLeaves;
            for(int i = 0 ; i < leaves.size() ; i++){
                int probableLeaf = *(adjList[leaves[i]].begin());
                adjList[leaves[i]].clear();
                //auto it = find(adjList[probableLeaf].begin(), adjList[probableLeaf].end(), leaves[i]);
                adjList[probableLeaf].erase(leaves[i]);
                //remove(adjList[probableLeaf].begin(), adjList[probableLeaf].end(), leaves[i]);
                //cout << adjList[probableLeaf].size() << " " << probableLeaf << endl;
                if (adjList[probableLeaf].size() == 1) newLeaves.push_back(probableLeaf);
            }
            leaves = newLeaves;
        }
        return leaves;
        
    }
};