class Solution {
public:
    int m,n;
    bool dfs(const char* w, vector<vector<char>>& board, int row, int col){
        if(row < 0 || col < 0 || row >= m || col >= n || board[row][col] != *w || board[row][col] == '#') return false;
        //cout << row << " " << col << endl;
        if (*(w+1)=='\0') return true;
        char temp = board[row][col];
        board[row][col] = '#';
        if(dfs(w+1, board, row+1, col)
        || dfs(w+1, board, row-1, col)
        || dfs(w+1, board, row, col+1)
        || dfs(w+1, board, row, col-1))
                return true;
        board[row][col] = temp;
        return false;
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        unordered_map<int, int> visitedTillNow;
        m = board.size();
        n = board[0].size();
        for (int i = 0 ; i < m ; i++){
            for (int j = 0 ; j < n ; j++){
                //cout << "Start one" << endl;
                if (dfs(word.c_str(),board,i,j)) return true;
            }
        }
        return false;
    }
    
};