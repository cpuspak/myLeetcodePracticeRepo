/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* fast = head;
        ListNode* slow = head;
        if (!fast || !fast->next || !fast->next->next) return NULL;
        fast = fast->next->next;
        slow = slow->next;
        while(true){
            //cout << fast->val << " " << slow->val << endl;
            if(!fast || !slow || !slow->next || !fast->next || !fast->next->next) break;
            if (fast == slow) break;
            if (fast->next && fast->next->next) fast = fast->next->next;
            if (slow->next) slow = slow->next;
        }
        //cout << fast->val << " " << slow->val << endl;
        
        if (!fast || !slow || !slow->next || !fast->next || !fast->next->next) {
            return NULL;
        }
        fast = head;
        while(fast != slow){
            fast = fast->next;
            slow = slow->next;
            //cout << fast->val << " " << slow->val << endl;
        }
        return fast;
    }
};