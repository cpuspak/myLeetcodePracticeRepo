//big brain math soln
This is a combinatorial problem and can be solved without DP. For mxn grid, robot has to move exactly m-1 steps down and n-1 steps right and these can be done in any order.

For the eg., given in question, 3x7 matrix, robot needs to take 2+6 = 8 steps with 2 down and 6 right in any order. That is nothing but a permutation problem. Denote down as 'D' and right as 'R', following is one of the path :-

D R R R D R R R

We have to tell the total number of permutations of the above given word. So, decrease both m & n by 1 and apply following formula:-

Total permutations = (m+n)! / (m! * n!)

Following is my code doing the same :-

public class Solution {
    public int uniquePaths(int m, int n) {
        if(m == 1 || n == 1)
            return 1;
        m--;
        n--;
        if(m < n) {              // Swap, so that m is the bigger number
            m = m + n;
            n = m - n;
            m = m - n;
        }
        long res = 1;
        int j = 1;
        for(int i = m+1; i <= m+n; i++, j++){       // Instead of taking factorial, keep on multiply & divide
            res *= i;
            res /= j;
        }
            
        return (int)res;
    }
}



//little brain dp soln by me
class Solution {
public:
    
    int findPath(vector<vector<int>>& dp, int m, int n, int rowNo, int colNo){
        if (dp[rowNo][colNo] > 0) return dp[rowNo][colNo];
        //cout << rowNo << " " << colNo << endl;
        if(isValid(rowNo+1,colNo,m,n)){
            if (dp[rowNo+1][colNo] == 0) dp[rowNo+1][colNo] = findPath(dp, m, n, rowNo+1, colNo);
            dp[rowNo][colNo] += dp[rowNo+1][colNo];
            
        }
        if(isValid(rowNo,colNo+1,m,n)){
            if (dp[rowNo][colNo+1] == 0) dp[rowNo][colNo+1] = findPath(dp, m, n, rowNo, colNo+1);
            dp[rowNo][colNo] += dp[rowNo][colNo+1];
        }
        //dp[rowNo][colNo] = dp[rowNo+1][colNo] + dp[rowNo][colNo+1];
        return dp[rowNo][colNo];
    }
    
    bool isValid(int curRow, int curCol, int totalRow, int totalCol){
        if (curRow >= 0 && curRow < totalRow && curCol >= 0 && curCol < totalCol) {
            //cout << curRow << " " << curCol << endl;
            return true;
        }
        return false;
    }
    
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n,0));
        for (int i = 0 ; i < n ; i++){
            dp[m-1][i] = 1;
        }
        for (int i = 0 ; i < m ; i++){
            dp[i][n-1] = 1;
        }
        //cout << "im here";
        findPath(dp, m, n, 0, 0);
        
        // for(int i = 0 ; i < m ; i++){
        //     for(int j = 0 ; j < n ; j++){
        //         cout << dp[i][j] << " ";
        //     }
        //     cout << endl;
        // }
        
        return dp[0][0];
        
    }
};